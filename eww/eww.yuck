
;;Left Bar 

(defvar eww "/bin/eww -c $HOME/.config/eww/")

(defpoll currentWindow :interval "100ms"
  `scripts/currentwindow.sh`)

(defwidget leftbar []
    (box :orientation "h"
    :halign "start"
    :class "mod-left"
    :space-evenly false
    
    (button :class "launcher_icon" 
		   	:onclick "~/.config/rofi/launchers/type-7/launcher.sh"  
            (label 
                :width 26
                :halign "center"
                :text " " ))
    (statusbar)
    (label 
        :text " ${currentWindow}" 
        :class "current-window")
    (pacmanStatus)
    )
)

(defwidget statusbar []
    (box :orientation "h"
    :halign "start"
    :class "statusbar"

    (label :text " ${round((EWW_CPU.cores[0].usage + EWW_CPU.cores[1].usage + EWW_CPU.cores[2].usage + EWW_CPU.cores[3].usage)/4,0) }%" :class "status-cpu")
    (label :text " ${round(EWW_RAM.used_mem / 1000000000,2)}GB":class "status-mem")
    (label :text " ${round((EWW_TEMPS.CORETEMP_CORE_0 + EWW_TEMPS.CORETEMP_CORE_1 + EWW_TEMPS.CORETEMP_CORE_2 + EWW_TEMPS.CORETEMP_CORE_3)/4,0)}°C" :class "status-temp")
    )
)

(defpoll packages :interval "5s"
  `scripts/pacmanUpdates.sh`)


(defwidget pacmanStatus []
    (box :orientation "h"
    :halign "start"
    :class "pacman"

    (label :text "󰚰" :class "pacman-icon" :width 36 :halign "center")
    (label :text packages :class "pacman-updates")
    )
)

;;Center Bar

(defwidget centerbar []
    (box :orientation "h"
    :halign "center"
    :class "mod-center"
    :space-evenly false
    
    (label :text "Center")
    )
)

;;Right Bar

(defwidget rightbar []
    (box :orientation "h"
    :halign "end"
    :class "mod-right"
    :space-evenly false

    (optionsbar)
    (label :text "" :class "arrow")
    (clock)
    (power)
    )
)


  (defwidget power [] 
      (eventbox	
          :onhover "${eww} update POWER_MENU=true"	
          :onhoverlost "${eww} update POWER_MENU=false" 
          
          (box :orientation "h"
              :vexpand "false" 	
              :space-evenly false
      
              (revealer	
                :transition "slideleft"				
  				:reveal {POWER_MENU == true ? true : false}			 
   				:duration "550ms"
      
                  (box :orientation "h"
                      :halign "start"
                      :class "statusbar powerbar"
                      :width 125
                      :space-evenly true
  
                      (button :class "powerbar-shutdown"
                      :onclick "scripts/power/shutdown.sh"
                       "󰐥")
                      (button :class "powerbar-restart" 
                      :onclick "scripts/power/reboot.sh"
                      "")
                      ;;(button :class "powerbar-sleep"
                      ;;:onclick "scripts/power/sleep.sh"
                      ;; "⏾")
                      (button 
                        :class "powerbar-logout" 
                        :onclick "scripts/power/logout.sh"
                        "󰍃")
                  )
              )
              (button :class "power-icon" :halign "center" :width 36
                  (label :text "⏻" :xalign 0.45)
              )
          )
    )
)
(defvar POWER_MENU false)






(defpoll time :interval "5s"
  `date +'{"hour":"%H","min":"%M"}'`)

(defwidget clock []
    (box :orientation "h"
    :halign "start"
    :class "pacman"
    :space-evenly false
    :class "clock"
    (label :text "" :class "clock-icon" :width 36 :xalign 0.35) 
    (label :text "${(time.hour + 8) % 12 }:${time.min}" :class "clock-time")
    )
)

(defpoll bluetoothCon :interval "5s"
  `scripts/numBluetooth.sh`)
(defpoll volume :interval "100ms"
  `scripts/getVolume.sh`)

(defwidget optionsbar []
    (box :orientation "h"
    :halign "start"
    :class "statusbar"
    :space-evenly false

        (button :class "wallpaper-button" 
		   	:onclick "scripts/wallpaper.sh"  "󰟾")

        (button :class "bluetooth-button" 
		   	:onclick "scripts/open/bluetooth.sh"  "󰂯 ${bluetoothCon}")

        (button :class "audio-button" 
		   	:onclick "scripts/audio.sh"  " ${volume}")
    )
)

(defwindow topbarSecondary
    :monitor 1
    :geometry (geometry :x "10px"
              :y "10px"
              :height "36px"
              :width "99%"
              :anchor "top center")
    ;;:reserve (struts :side "top" :distance "30px")
    :exclusive "true"
    ;;:windowtype "dock"
    ;;:stacking "bt"

    (box :orientation "h" :class "main"    
        (leftbar)
        ;;(centerbar)
        (rightbar)
    )
)

(defwindow topbarPrimary
    :monitor 0
    :geometry (geometry :x "10px"
              :y "10px"
              :height "36px"
              :width "99%"
              :anchor "top center")
    ;;:reserve (struts :side "top" :distance "30px")
    :exclusive "true"
    ;;:windowtype "dock"
    ;;:stacking "bt"

    (box :orientation "h" :class "main"    
        (leftbar)
        ;;(centerbar)
        (rightbar)
    )
)
